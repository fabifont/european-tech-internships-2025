/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LayoutIndexImport } from "./routes/_layout/index";
import { Route as JobsImport } from "./routes/jobs";
import { Route as LoginImport } from "./routes/login";
import { Route as SignupImport } from "./routes/signup";
import { Route as SettingsImport } from "./routes/settings";
import { Route as HistoryImport } from "./routes/history";

// Create/Update Routes

const JobsRoute = JobsImport.update({
  id: "/jobs",
  path: "/jobs",
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any);

const SignupRoute = SignupImport.update({
  id: "/signup",
  path: "/signup",
  getParentRoute: () => rootRoute,
} as any);

const SettingsRoute = SettingsImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => rootRoute,
} as any);

const HistoryRoute = HistoryImport.update({
  id: "/history",
  path: "/history",
  getParentRoute: () => rootRoute,
} as any);

const LayoutIndexRoute = LayoutIndexImport.update({
  id: "/_layout/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/jobs": {
      id: "/jobs";
      path: "/jobs";
      fullPath: "/jobs";
      preLoaderRoute: typeof JobsImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    "/signup": {
      id: "/signup";
      path: "/signup";
      fullPath: "/signup";
      preLoaderRoute: typeof SignupImport;
      parentRoute: typeof rootRoute;
    };
    "/settings": {
      id: "/settings";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof SettingsImport;
      parentRoute: typeof rootRoute;
    };
    "/history": {
      id: "/history";
      path: "/history";
      fullPath: "/history";
      preLoaderRoute: typeof HistoryImport;
      parentRoute: typeof rootRoute;
    };
    "/_layout/": {
      id: "/_layout/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof LayoutIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/jobs": typeof JobsRoute;
  "/login": typeof LoginRoute;
  "/signup": typeof SignupRoute;
  "/settings": typeof SettingsRoute;
  "/history": typeof HistoryRoute;
  "/": typeof LayoutIndexRoute;
}

export interface FileRoutesByTo {
  "/jobs": typeof JobsRoute;
  "/login": typeof LoginRoute;
  "/signup": typeof SignupRoute;
  "/settings": typeof SettingsRoute;
  "/history": typeof HistoryRoute;
  "/": typeof LayoutIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/jobs": typeof JobsRoute;
  "/login": typeof LoginRoute;
  "/signup": typeof SignupRoute;
  "/settings": typeof SettingsRoute;
  "/history": typeof HistoryRoute;
  "/_layout/": typeof LayoutIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/jobs" | "/login" | "/signup" | "/settings" | "/history" | "/";
  fileRoutesByTo: FileRoutesByTo;
  to: "/jobs" | "/login" | "/signup" | "/settings" | "/history" | "/";
  id:
    | "__root__"
    | "/jobs"
    | "/login"
    | "/signup"
    | "/settings"
    | "/history"
    | "/_layout/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  JobsRoute: typeof JobsRoute;
  AdvancedRoute: typeof AdvancedRoute;
  LayoutIndexRoute: typeof LayoutIndexRoute;
  LoginRoute: typeof LoginRoute;
  SignupRoute: typeof SignupRoute;
  SettingsRoute: typeof SettingsRoute;
  HistoryRoute: typeof HistoryRoute;
}

const rootRouteChildren: RootRouteChildren = {
  JobsRoute: JobsRoute,
  AdvancedRoute: AdvancedRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  SettingsRoute: SettingsRoute,
  HistoryRoute: HistoryRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/jobs",
        "/_layout/",
        "/login",
        "/signup",
        "/settings",
        "/history"
      ]
    },
    "/jobs": {
      "filePath": "jobs.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/history": {
      "filePath": "history.tsx"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
